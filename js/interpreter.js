// Generated by LiveScript 1.4.0
(function(){
  var b, operators, specials, interpret;
  b = require("./builtins.js");
  operators = {
    "+": b.add,
    "-": b.sub,
    "*": b.mul,
    "/": b.div,
    "%": b.mod,
    "^": b.exp,
    "<": b.lt,
    ">": b.gt,
    "=": b.eq,
    ",": b.drop,
    ":": b.swap,
    ";": b.dup,
    "_": b.incl_range,
    "!": b.apply,
    ")": b.pack,
    "(": b.unpack,
    "@": b.rot,
    "l": b.length,
    ".": b.print
  };
  specials = ["{", "}", "[", "]", "`"];
  interpret = function(code, flags){
    var ops, stacks, currentstack, stackoffset, applypushes, pos, char, apply, stack, numstr;
    flags == null && (flags = {});
    ops = clone$(operators);
    stacks = [[]];
    currentstack = 0;
    stackoffset = 0;
    applypushes = [true];
    pos = 0;
    return {
      mainloop: (function(){
        var ref$, results$ = [];
        while (pos < code.length) {
          char = code[pos];
          console.log("");
          apply = applypushes[applypushes.length - 1];
          stack = stacks[currentstack + stackoffset];
          if (char in ops) {
            if (apply) {
              b.push(ops[char], stack);
            } else {
              stack.push(ops[char]);
            }
            if (flags.verbose) {
              console.log(JSON.stringify(stack));
            }
          } else if (char === "0" || char === "1" || char === "2" || char === "3" || char === "4" || char === "5" || char === "6" || char === "7" || char === "8" || char === "9") {
            if (flags.multidigitnumbers) {
              numstr = char;
              while (pos < code.length && ((ref$ = code[++pos]) === "0" || ref$ === "1" || ref$ === "2" || ref$ === "3" || ref$ === "4" || ref$ === "5" || ref$ === "6" || ref$ === "7" || ref$ === "8" || ref$ === "9")) {
                numstr += code[pos];
              }
              stack.push(+numstr);
              pos--;
            } else {
              stack.push(+char);
            }
            if (flags.verbose) {
              console.log(JSON.stringify(stack));
            }
          } else if (in$(char, specials)) {
            switch (specials.indexOf(char)) {
            case 0:
              applypushes.push(false);
              currentstack++;
              if (stacks.length - stackoffset < currentstack + 1) {
                stacks.push([]);
              }
              break;
            case 1:
              if (applypushes.length > 1) {
                applypushes.pop();
              }
              currentstack -= 1;
              if (currentstack < 0) {
                while (stackoffset + currentstack < 0) {
                  stackoffset++;
                  stacks.unshift([]);
                }
              }
              stacks[currentstack + stackoffset].push(b.fseq(stack));
              stacks[currentstack + stackoffset + 1] = [];
              break;
            case 2:
              applypushes.push(true);
              currentstack++;
              if (stacks.length - stackoffset < currentstack + 1) {
                stacks.push([]);
              }
              break;
            case 3:
              if (applypushes.length > 1) {
                applypushes.pop();
              }
              currentstack -= 1;
              if (currentstack < 0) {
                while (stackoffset + currentstack < 0) {
                  stackoffset++;
                  stacks.unshift([]);
                }
              }
              stacks[currentstack + stackoffset].push(stack);
              stacks[currentstack + stackoffset + 1] = [];
              break;
            case 4:
              if (++pos < code.length) {
                if ((ref$ = code[pos]) === "0" || ref$ === "1" || ref$ === "2" || ref$ === "3" || ref$ === "4" || ref$ === "5" || ref$ === "6" || ref$ === "7" || ref$ === "8" || ref$ === "9") {
                  if (flags.multidigitnumbers) {
                    numstr = code[pos];
                    while (pos < code.length && ((ref$ = code[++pos]) === "0" || ref$ === "1" || ref$ === "2" || ref$ === "3" || ref$ === "4" || ref$ === "5" || ref$ === "6" || ref$ === "7" || ref$ === "8" || ref$ === "9")) {
                      numstr += code[pos];
                    }
                    stack.push(b.fseq([+numstr]));
                    pos--;
                  } else {
                    stack.push(b.fseq([+char]));
                  }
                } else if (code[pos] in ops) {
                  stack.push(b.fseq([ops[char]]));
                }
              }
            }
          }
          if (flags.verbose) {
            console.log("stack: " + currentstack + ", offset: " + stackoffset + ", apply: " + applypushes[applypushes.length - 1]);
            console.log("all stacks:", JSON.stringify(stacks));
          }
          results$.push(pos++);
        }
        return results$;
      }())
    };
  };
  process.stdin.resume();
  process.stdin.setEncoding('utf8');
  process.stdin.on('data', function(text){
    if (text === 'quit') {
      process.exit();
    }
    return interpret(text, {
      verbose: true,
      multidigitnumbers: true
    });
  });
  function clone$(it){
    function fun(){} fun.prototype = it;
    return new fun;
  }
  function in$(x, xs){
    var i = -1, l = xs.length >>> 0;
    while (++i < l) if (x === xs[i]) return true;
    return false;
  }
}).call(this);
